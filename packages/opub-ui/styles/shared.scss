$default-browser-font-size: 16px;
$base-font-size: 16px;

@function rem($value) {
  $unit: unit($value);

  @if $value == 0 {
    @return 0;
  } @else if $unit == 'rem' {
    @return $value;
  } @else if $unit == 'px' {
    @return calc($value / $base-font-size) * 1rem;
  } @else if $unit == 'em' {
    @return calc($unit / 1em) * 1rem;
  } @else {
    @error 'Value must be in px, em, or rem.';
  }
}

@mixin recolor-icon(
  $fill-color: null,
  $secondary-color: null,
  $filter-color: null
) {
  svg {
    fill: $fill-color;
    color: $secondary-color;
  }

  img {
    filter: $filter-color;
  }
}

@mixin high-contrast-button-outline($outline: var(--border-width-2) dotted) {
  @media (-ms-high-contrast: active) {
    outline: $outline;
  }
}

@mixin high-contrast-outline($border-width: border-width()) {
  outline: $border-width solid transparent;
  @content;
}

$border-width-data: (
  base: rem(1px),
  thick: rem(2px),
  thicker: rem(3px),
);

/// Returns the width of the specified border type.
/// @param {String} $variant [base] - The border variant key.
/// @return {Number} The width for the border.

@function border-width($variant: base) {
  $fetched-value: map-get($border-width-data, $variant);

  @if type-of($fetched-value) == number {
    @return $fetched-value;
  } @else {
    @error 'Border width variant `#{$variant}` not found. Available variants: #{available-names($border-width-data)}';
  }
}

@mixin focus-ring($size: 'base', $border-width: 0, $style: 'base') {
  $stroke: rem(2px);
  $offset: if(
    $border-width == 0,
    rem(1px),
    calc(#{$border-width} + #{rem(1px)})
  );
  $border-radius: if(
    $size == 'wide',
    var(--border-radius-2),
    var(--border-radius-1)
  );
  $negative-offset: calc(-1 * #{$offset});

  @if $style == 'base' {
    position: relative;

    &::after {
      content: '';
      position: absolute;
      z-index: 1;
      top: $negative-offset;
      right: $negative-offset;
      bottom: $negative-offset;
      left: $negative-offset;
      display: block;
      pointer-events: none;
      box-shadow: 0 0 0 $negative-offset var(--focused);
      transition: box-shadow duration(fast) var(--ease);
      border-radius: calc(#{$border-radius} + #{rem(1px)});
    }
  } @else if $style == 'focused' {
    &::after {
      box-shadow: 0 0 0 $stroke var(--focused);
      @include high-contrast-outline();
    }
  }
}

@mixin no-focus-ring {
  &::after {
    content: none;
  }
}

@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: 0 !important;
  padding: 0 !important;
  overflow: hidden !important;
  clip-path: inset(50%) !important;
  border: 0 !important;
  white-space: nowrap !important;
}

@mixin control-backdrop($style: base) {
  --control-border-width: var(--border-width-2);
  @if $style == base {
    position: relative;
    border: var(--control-border-width) solid var(--border);
    background-color: var(--surface);
    border-radius: var(--border-radius-1);

    &::before {
      content: '';
      position: absolute;
      top: calc(-1 * var(--control-border-width));
      right: calc(-1 * var(--control-border-width));
      bottom: calc(-1 * var(--control-border-width));
      left: calc(-1 * var(--control-border-width));
      border-radius: var(--border-radius-1);
      background-color: var(--interactive);
      opacity: 0;
      transform: scale(0.25);
      transition: opacity duration(fast) var(--ease),
        transform duration(fast) var(--ease);
    }

    &.hover,
    &:hover {
      cursor: pointer;
      border-color: var(--border-hovered);
    }
  } @else if $style == active {
    border-color: var(--interactive);

    &::before {
      opacity: 1;
      transform: scale(1);
      @media (-ms-high-contrast: active) {
        border: 2px solid ms-high-contrast-color('text');
      }
    }
  } @else if $style == disabled {
    border-color: var(--border-disabled);

    &::before {
      background-color: var(--action-secondary-disabled);
    }

    &:hover {
      cursor: default;
    }
  } @else if $style == error {
    border-color: var(--border-critical);
    background-color: var(--surface-critical);

    &.hover,
    &:hover {
      border-color: var(--border-critical);
    }

    &::before {
      background-color: var(--border-critical);
    }
  }
}

$typography-condensed: em(640px);

@mixin breakpoint-after($breakpoint, $inclusive: true) {
  @media (min-width: #{breakpoint($breakpoint, if($inclusive, 0, 1px))}) {
    @content;
  }
}

@mixin when-typography-not-condensed {
  @include breakpoint-after($typography-condensed) {
    @content;
  }
}

@mixin text-style-input {
  font-size: var(--font-size-200);
  font-weight: var(--font-weight-regular);
  line-height: var(--font-line-height-3);
  border: none;

  text-transform: initial;
  letter-spacing: initial;

  @include when-typography-not-condensed {
    font-size: var(--font-size-100);
  }
}

@mixin text-breakword {
  word-wrap: break-word;
  word-break: break-word;
  overflow-wrap: break-word;
}

@function control-height() {
  @return rem(36px);
}

@function control-slim-height() {
  @return rem(28px);
}

@function control-vertical-padding() {
  @return calc((control-height() - var(--font-line-height-3) - rem(2px)) / 2);
}

@mixin responsive-props($componentName, $componentProp, $declarationProp) {
  --op-#{$componentName}-#{$componentProp}-xs: initial;
  --op-#{$componentName}-#{$componentProp}-sm: initial;
  --op-#{$componentName}-#{$componentProp}-md: initial;
  --op-#{$componentName}-#{$componentProp}-lg: initial;
  --op-#{$componentName}-#{$componentProp}-xl: initial;

  #{$declarationProp}: var(--op-#{$componentName}-#{$componentProp}-xs);

  @media #{$breakpoints-sm-up} {
    #{$declarationProp}: var(
      --op-#{$componentName}-#{$componentProp}-sm,
      var(--op-#{$componentName}-#{$componentProp}-xs)
    );
  }

  @media #{$breakpoints-md-up} {
    #{$declarationProp}: var(
      --op-#{$componentName}-#{$componentProp}-md,
      var(
        --op-#{$componentName}-#{$componentProp}-sm,
        var(--op-#{$componentName}-#{$componentProp}-xs)
      )
    );
  }

  @media #{$breakpoints-lg-up} {
    #{$declarationProp}: var(
      --op-#{$componentName}-#{$componentProp}-lg,
      var(
        --op-#{$componentName}-#{$componentProp}-md,
        var(
          --op-#{$componentName}-#{$componentProp}-sm,
          var(--op-#{$componentName}-#{$componentProp}-xs)
        )
      )
    );
  }

  @media #{$breakpoints-xl-up} {
    #{$declarationProp}: var(
      --op-#{$componentName}-#{$componentProp}-xl,
      var(
        --op-#{$componentName}-#{$componentProp}-lg,
        var(
          --op-#{$componentName}-#{$componentProp}-md,
          var(
            --op-#{$componentName}-#{$componentProp}-sm,
            var(--op-#{$componentName}-#{$componentProp}-xs)
          )
        )
      )
    );
  }
}

@mixin list-selected-indicator {
  content: '';
  background-color: var(--interactive);
  position: absolute;
  top: 0;
  left: calc(-1 * var(--space-2));
  height: 100%;
  display: block;
  width: var(--border-width-3);
  border-top-right-radius: var(--border-radius-1);
  border-bottom-right-radius: var(--border-radius-1);
}

@mixin base-button-disabled {
  @include recolor-icon(var(--icon-disabled));
  transition: none;
  box-shadow: none;
  border-color: var(--border-disabled);
  background: var(--surface-disabled);
  color: var(--text-disabled);
}
