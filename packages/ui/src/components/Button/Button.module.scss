@import '../../../styles/common';

@mixin button-base {
  $vertical-padding: calc(
    (36px - var(--font-line-height-2) - var(--space-05)) / 2
  );

  @include recolor-icon(var(--icon-default));

  @include focus-ring($border-width: var(--border-width-1));

  position: relative;

  display: inline-flex;

  align-items: center;

  justify-content: center;
  min-height: 36px;
  min-width: 36px;
  margin: 0;
  padding: $vertical-padding var(--space-4);
  background: var(--surface-default);
  box-shadow: var(--shadow-button);
  border-radius: var(--border-radius-1);
  color: var(--text-default);
  border: var(--border-width-1) solid var(--border-neutral-subdued);
  border-top-color: var(--border-subdued);
  border-bottom-color: var(--border-shadow-subdued);
  line-height: 1;
  text-align: center;
  cursor: pointer;
  user-select: none;
  text-decoration: none;
  -webkit-tap-highlight-color: transparent;

  &:hover {
    background: var(--action-secondary-hovered);
    outline: var(--border-width-1) solid transparent;
  }

  &:focus-visible {
    box-shadow: var(--shadow-button);
    outline: 0;

    @include focus-ring($style: 'focused');
  }

  &:active {
    background: var(--action-secondary-pressed);
    box-shadow: var(--shadow-button);

    &::after {
      border: none;
      box-shadow: none;
    }
  }

  &.pressed {
    background: var(--action-secondary-depressed);
    box-shadow: var(--shadows-inset-button-pressed);
    color: var(--text-on-primary);
    border-color: var(--border-depressed);

    @include recolor-icon(currentColor);
  }

  @media (-ms-high-contrast: active) {
    border: var(--border-width-1) solid windowText;
  }
}

@mixin base-button-disabled {
  @include recolor-icon(var(--icon-disabled));
  transition: none;
  box-shadow: none;
  border-color: var(--border-disabled);
  background: var(--surface-disabled);
  color: var(--text-disabled);
}

@mixin button-filled() {
  @include focus-ring($border-width: 0);

  background: var(--button-color);
  border-width: 0;
  border-color: transparent;
  box-shadow: var(--shadow-button), var(--shadows-inset-button);

  color: var(--button-text);

  &:hover {
    background: var(--button-color-hover);
    border-color: transparent;

    color: var(--button-text);
  }

  &:focus {
    border-color: transparent;
    box-shadow: var(--shadow-button), var(--shadows-inset-button);
  }

  &:active {
    background: var(--button-color-active);
    border-color: transparent;
    box-shadow: var(--shadow-button), var(--shadows-inset-button);
  }

  &.pressed {
    color: var(--button-text);

    background: var(--button-color-depressed);
    border-color: transparent;
    box-shadow: var(--shadow-button), var(--shadows-inset-button);

    &:hover,
    &:focus {
      background: var(--button-color-depressed);
      box-shadow: var(--shadow-button), var(--shadows-inset-button);
    }
  }
}

@mixin button-outline($outline-color, $background-color: transparent) {
  background: $background-color;
  border: var(--border-width-1) solid var(--border-default);
  box-shadow: none;
  color: var(--text-default);

  @include focus-ring($border-width: 1px);

  &:hover {
    border: var(--border-width-1) solid var(--border-hovered);
    box-shadow: none;
    background: var(--surface-hovered);
  }

  &:focus-visible {
    border: var(--border-width-1) solid var(--border-default);
    box-shadow: none;

    @include focus-ring($style: 'focused');
  }

  &:active {
    border: var(--border-width-1) solid var(--border-depressed);
    box-shadow: none;
    background: var(--surface-pressed);

    &::after {
      box-shadow: none;
    }
  }

  &.pressed {
    background: var(--action-secondary-depressed);
    border: var(--border-width-1) solid var(--border-depressed);
    box-shadow: none;

    color: var(--text-on-primary);
  }

  &.disabled {
    border: var(--border-width-1) solid var(--border-disabled);
    box-shadow: none;
    background: transparent;
    color: var(--text-disabled);
  }

  &.destructive {
    background: transparent;
    border: var(--border-width-1) solid var(--border-critical);
    box-shadow: none;
    color: var(--interactive-critical);

    @include recolor-icon(var(--icon-critical));

    &:hover {
      border: var(--border-width-1) solid var(--border-critical);
      background: var(--surface-critical-subdued);
    }

    &:focus-visible {
      border: var(--border-width-1) solid var(--border-critical);

      @include focus-ring($style: 'focused');
    }

    &:active {
      border: var(--border-width-1) solid var(--border-critical);
      background: var(--surface-critical-subdued);
    }

    &.disabled {
      border: var(--border-width-1) solid var(--border-critical-disabled);
      background: transparent;
      color: var(--interactive-critical-disabled);
    }

    &.pressed {
      border: var(--border-width-1) solid var(--border-critical);
      background: var(--surface-critical-subdued);
      color: var(--interactive-critical);
    }
  }
}

@mixin button-outline-disabled($outline-color) {
  background: transparent;
  box-shadow: none;
}

@mixin button-full-width {
  display: flex;

  width: 100%;
}

@mixin plain-button-backdrop {
  padding: var(--space-05) var(--space-1);
  margin: calc(-1 * var(--space-05)) calc(-1 * var(--space-1));
  background: transparent;
  border-radius: var(--border-radius-1);
}

.Button {
  --button-slim-min-height: var(--font-line-height-4);
  --button-large-min-height: 44px;
  --button-vertical-padding: calc(
    (36px - var(--font-line-height-2) - var(--space-05)) / 2
  );
  --button-slim-vertical-padding: calc(
    (
        var(--button-slim-min-height) - var(--font-line-height-2) -
          var(--space-05)
      ) / 2
  );
  --button-large-vertical-padding: calc(
    (
        var(--button-large-min-height) - var(--font-line-height-2) -
          var(--space-05)
      ) / 2
  );
  --button-spinner-size: 20px;
  --button-segment: 10;
  --button-focused: 20;
  --button-disclosure-icon-offset: -6px;

  @include button-base;

  &.disabled {
    @include base-button-disabled;
  }

  &.connectedDisclosure {
    z-index: var(--button-segment);
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;

    &::after {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }

    &:focus {
      z-index: var(--button-focused);
    }
  }
}

.Content {
  font-size: var(--font-size-100);
  font-weight: var(--font-weight-medium);
  line-height: var(--font-line-height-1);

  text-transform: initial;
  letter-spacing: initial;

  position: relative;

  display: flex;

  justify-content: center;

  align-items: center;
  min-width: 1px;
  min-height: 1px;

  .Button:not(.plain) & {
    width: 100%;
  }
}

.textAlignLeft {
  justify-content: flex-start;
  text-align: left;

  .Content {
    justify-content: flex-start;
  }
}

.textAlignStart {
  justify-content: flex-start;
  text-align: start;

  .Content {
    justify-content: flex-start;
  }
}

.textAlignCenter {
  justify-content: center;
  text-align: center;
}

.textAlignRight {
  justify-content: flex-end;
  text-align: right;

  .Content {
    justify-content: flex-end;
  }
}

.textAlignEnd {
  justify-content: flex-end;
  text-align: end;

  .Content {
    justify-content: flex-end;
  }
}

.Icon {
  margin-left: calc(-1 * (var(--space-1)));
  line-height: 0;

  &:last-child {
    margin-right: var(--button-disclosure-icon-offset);
    margin-left: var(--space-1);
  }

  .fullWidth.textAlignLeft &:last-child:not(:only-child) {
    margin-left: auto;
  }

  + *:not(.Icon) {
    margin-left: var(--space-1);
  }
}

.hidden {
  visibility: hidden;
}

.Spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  margin-top: calc(-1 * (var(--button-spinner-size) / 2));
  margin-left: calc(-1 * (var(--button-spinner-size) / 2));
}

.primary,
.destructive {
  @include button-filled;

  &.disabled {
    @include recolor-icon(var(--icon-disabled));
    color: var(--text-disabled);
    box-shadow: none;
    border-color: transparent;
  }
}

.primary {
  --button-color: var(--action-primary-default);
  --button-text: var(--text-on-primary);
  --button-color-hover: var(--action-primary-hovered);
  --button-color-active: var(--action-primary-pressed);
  --button-color-depressed: var(--action-primary-depressed);

  @include recolor-icon(var(--icon-on-primary));

  &.disabled {
    background: var(--action-primary-disabled);
  }
}

.destructive {
  --button-color: var(--action-critical-default);
  --button-text: var(--text-on-critical);
  --button-color-hover: var(--action-critical-hovered);
  --button-color-active: var(--action-critical-pressed);
  --button-color-depressed: var(--action-critical-depressed);

  @include recolor-icon(var(--icon-on-critical));

  &.disabled {
    background: var(--action-critical-disabled);
  }
}

.outline {
  @include button-outline(var(--border));

  &.disabled {
    background: transparent;
    box-shadow: none;
  }
}

.destructive.outline {
  @include button-outline(var(--border-critical));
}

.disabled {
  cursor: default;
  pointer-events: none;
}

.loading {
  position: relative;

  &,
  &:hover,
  &.disabled {
    color: transparent;
  }
}

.loading.disabled svg {
  fill: var(--icon-subdued);
}

.plain {
  @include recolor-icon(var(--interactive-default));

  margin: calc(-1 * var(--button-vertical-padding)) calc(-1 * var(--space-2));
  padding-left: var(--space-2);
  padding-right: var(--space-2);
  background: transparent;
  border: 0;
  box-shadow: none;
  color: var(--interactive-default);

  > .Content {
    font-weight: var(--font-weight-regular);

    @include focus-ring;
  }

  &:hover,
  &:focus:not(.disabled) {
    @include recolor-icon(var(--interactive-hovered));
    color: var(--interactive-hovered);
    background: transparent;
    box-shadow: none;

    &:not(.removeUnderline) {
      text-decoration: underline;
    }
  }

  &.pressed,
  &:active {
    @include recolor-icon(var(--interactive-pressed));
    color: var(--interactive-pressed);

    @include high-contrast-button-outline(none);
    background: transparent;
    box-shadow: none;
  }

  &:focus-visible {
    @include no-focus-ring;

    @include high-contrast-button-outline(none);

    > .Content {
      @include high-contrast-button-outline;
    }
  }

  &:focus-visible:not(:active) {
    > .Content {
      @include focus-ring($style: 'focused');
    }
  }

  &:active:not(.iconOnly) > .Content,
  &.pressed:not(.iconOnly) > .Content {
    @include plain-button-backdrop;
  }

  &.fullWidth {
    margin-left: 0;
    margin-right: 0;
  }

  &.disabled {
    color: var(--text-disabled);
    background: none;

    &.loading {
      color: transparent;
    }
  }

  &.destructive {
    @include recolor-icon(var(--interactive-critical));
    color: var(--interactive-critical);

    &:hover {
      color: var(--interactive-critical-hovered);
    }

    &:active,
    &.pressed {
      color: var(--interactive-critical-pressed);
    }

    &.disabled {
      color: var(--interactive-critical-disabled);
    }
  }

  &.sizeSlim {
    margin-top: calc(-1 * var(--button-slim-vertical-padding));

    margin-bottom: calc(-1 * var(--button-slim-vertical-padding));
  }

  &.sizeLarge {
    margin: calc(-1 * var(--button-large-vertical-padding))
      calc(-1 * var(--space-5));
  }

  &.iconOnly {
    @include recolor-icon(var(--icon-pressed));
    margin: calc(-1 * var(--space-2));

    &:hover {
      @include recolor-icon(var(--icon-hovered));
    }

    &:active,
    &.pressed {
      @include recolor-icon(var(--icon-pressed));
    }

    &.disabled {
      @include recolor-icon(var(--icon-disabled));
    }
  }

  &.destructive.iconOnly {
    @include recolor-icon(var(--action-critical-default));

    &:hover {
      @include recolor-icon(var(--action-critical-hovered));
    }

    &:active,
    &.pressed {
      @include recolor-icon(var(--action-critical-pressed));
    }

    &.disabled {
      @include recolor-icon(var(--action-critical-disabled));
    }
  }
}

.fullWidth {
  @include button-full-width;
}

.iconOnly {
  padding-left: var(--space-2);
  padding-right: var(--space-2);

  &.sizeLarge {
    padding-left: var(--space-3);
    padding-right: var(--space-3);
  }

  &.sizeSlim {
    padding-left: var(--space-1);
    padding-right: var(--space-1);
  }

  .Icon:first-child {
    margin-left: 0;
  }

  .Icon:last-child {
    margin-right: calc(-1 * var(--space-1));
  }

  .Icon:only-child {
    margin-right: 0;
  }
}

.sizeSlim {
  min-height: var(--button-slim-min-height);

  padding: var(--button-slim-vertical-padding) var(--space-3);
}

.sizeLarge {
  min-height: var(--button-large-min-height);

  min-width: var(--button-large-min-height);

  padding: var(--button-large-vertical-padding) var(--space-6);

  .Content {
    font-size: var(--font-size-200);
    font-weight: var(--font-weight-medium);
    line-height: var(--font-line-height-2);

    text-transform: initial;
    letter-spacing: initial;
  }
}

.monochrome {
  &.outline,
  &.plain {
    @include recolor-icon(currentColor);
    color: currentColor;

    &:hover,
    &:focus,
    &:active {
      @include recolor-icon(currentColor);
      color: currentColor;
    }

    &.disabled {
      color: currentColor;

      @include recolor-icon(currentColor);

      opacity: 0.4;
    }

    &.loading .Text {
      visibility: hidden;
    }

    &.iconOnly {
      @include recolor-icon(currentColor);

      &:focus,
      &:active {
        @include recolor-icon(currentColor);
      }

      &.disabled {
        @include recolor-icon(currentColor);
      }
    }
  }

  &.plain {
    .Text:not(.removeUnderline) {
      text-decoration: underline;
    }
  }

  &.outline {
    position: relative;
    border-color: currentColor;

    box-shadow: 0 0 0 var(--border-width-1) currentColor;

    @include focus-ring($border-width: 2px);

    &::before {
      content: '';

      position: absolute;

      top: 0;

      right: 0;

      bottom: 0;

      left: 0;
      background-color: currentColor;
      opacity: 0;

      z-index: 0;
    }

    &.pressed {
      background: var(--action-critical-default);
      box-shadow: none;
      color: var(--text-on-primary);

      &:hover,
      &:focus,
      &:active {
        background: var(--action-critical-default);
        box-shadow: none;
        color: var(--text-on-primary);
      }

      // &::before {
      //   opacity: 0.2;
      // }
    }

    &:hover,
    &:focus,
    &:active {
      background-color: transparent;
      border-color: currentColor;

      &::before {
        opacity: 0.07;
      }
    }

    &:focus-visible {
      box-shadow: 0 0 0 var(--border-width-1) currentColor;

      @include focus-ring($style: 'focused');
    }

    &:active::after {
      box-shadow: none;
    }

    &:hover,
    &:active {
      &::before {
        opacity: 0.05;
      }
    }
  }
}

.ConnectedDisclosureWrapper {
  display: flex;
}

.ConnectedDisclosure {
  z-index: var(--button-segment);
  margin-left: calc(-1 * var(--space-025));
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;

  height: 100%;

  &:focus,
  &:active {
    z-index: var(--button-focused);
  }

  &.primary,
  &.destructive {
    margin-left: var(--space-025);

    &.outline {
      margin-left: 0;
      border-left: 0;
    }
  }

  &::after {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
}

[data-buttongroup-segmented='true'] {
  .Button,
  .Button::after {
    border-radius: 0;
  }

  > :first-child .Button,
  > :first-child .Button::after {
    border-radius: 0;
    border-top-left-radius: var(--border-radius-1);
    border-bottom-left-radius: var(--border-radius-1);
  }

  > :last-child .Button,
  > :last-child .Button::after {
    border-radius: 0;
    border-top-right-radius: var(--border-radius-1);
    border-bottom-right-radius: var(--border-radius-1);
  }

  > :last-child:first-child .Button,
  > :last-child:first-child .Button::after {
    border-radius: var(--border-radius-1);
  }
}

[data-buttongroup-connected-top='true'] {
  > :first-child .Button,
  > :first-child .Button::after {
    border-top-left-radius: 0;
  }

  > :last-child .Button,
  > :last-child .Button::after {
    border-top-right-radius: 0;
  }
}

[data-buttongroup-full-width='true'] {
  .Button {
    @include button-full-width;
  }
}

.Placeholder {
  padding-bottom: 100%;
  background: currentColor;
}
